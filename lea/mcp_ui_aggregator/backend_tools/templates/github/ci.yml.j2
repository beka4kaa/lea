name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      {% if config.db == "postgres" %}
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_{{ config.name }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      {% endif %}
      
      {% if config.queue == "redis" or config.queue == "rq" %}
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      {% endif %}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}
      uses: actions/setup-python@v4
      with:
        python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with ruff
      run: |
        ruff check src tests
        ruff format --check src tests

    - name: Type check with mypy
      run: mypy src

    {% if config.orm == "sqlalchemy+alembic" %}
    - name: Run database migrations
      run: alembic upgrade head
      env:
        {% if config.db == "postgres" %}
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_{{ config.name }}
        {% else %}
        DATABASE_URL: sqlite:///./test.db
        {% endif %}
    {% endif %}

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        SECRET_KEY: test-secret-key-change-in-production
        {% if config.auth %}
        JWT_SECRET_KEY: test-jwt-secret-key-change-in-production
        {% endif %}
        {% if config.db == "postgres" %}
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_{{ config.name }}
        {% else %}
        DATABASE_URL: sqlite:///./test.db
        {% endif %}
        {% if config.queue == "redis" or config.queue == "rq" %}
        REDIS_URL: redis://localhost:6379
        {% endif %}

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}
      uses: actions/setup-python@v4
      with:
        python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}

    - name: Install bandit
      run: pip install bandit[toml]

    - name: Run security scan
      run: bandit -r src/ -f json -o bandit-report.json

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    {% if config.docker %}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: {% raw %}${{ github.actor }}{% endraw %}
        password: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/{% raw %}${{ github.repository }}{% endraw %}/{{ config.name }}:latest
          ghcr.io/{% raw %}${{ github.repository }}{% endraw %}/{{ config.name }}:{% raw %}${{ github.sha }}{% endraw %}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    {% endif %}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    # Add your deployment steps here
    # For Railway:
    # - name: Deploy to Railway
    #   uses: railway/deploy@v1
    #   with:
    #     token: {% raw %}${{ secrets.RAILWAY_TOKEN }}{% endraw %}
    #     environment: production
    
    # For other platforms, add appropriate deployment steps
    - name: Deploy Application
      run: |
        echo "Add your deployment commands here"
        echo "Deployment would happen here for commit {% raw %}${{ github.sha }}{% endraw %}"