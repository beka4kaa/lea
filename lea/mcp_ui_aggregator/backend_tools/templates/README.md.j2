# {{ config.name | title }} API

> Production-ready FastAPI service generated by LEA MCP Server

## 🚀 Quick Start

### Prerequisites

- Python 3.11+
{% if config.docker %}
- Docker and Docker Compose
{% endif %}
{% if config.db == "postgres" %}
- PostgreSQL 14+
{% endif %}
{% if config.queue == "redis" or config.queue == "rq" %}
- Redis 6+
{% endif %}

### Development Setup

1. **Clone and setup environment:**
   ```bash
   git clone <your-repo>
   cd {{ config.name }}
   cp .env.example .env
   # Edit .env with your configuration
   ```

2. **Install dependencies:**
   ```bash
   pip install -e .
   # or for development
   pip install -e ".[dev]"
   ```

{% if config.docker %}
3. **Start services with Docker:**
   ```bash
   docker-compose up -d {% if config.db == "postgres" %}postgres{% endif %}{% if config.queue == "redis" or config.queue == "rq" %} redis{% endif %}
   ```
{% endif %}

{% if config.orm == "sqlalchemy+alembic" %}
4. **Run database migrations:**
   ```bash
   alembic upgrade head
   ```
{% endif %}

5. **Start the application:**
   ```bash
   uvicorn src.app:app --reload
   ```

6. **Visit the API:**
   - API Documentation: http://localhost:8000/docs
   - Health Check: http://localhost:8000/health

## 📁 Project Structure

```
{{ config.name }}/
├── src/
│   ├── app.py              # FastAPI application
│   ├── core/               # Core configuration
│   │   ├── settings.py     # Application settings
{% if config.telemetry %}
│   │   ├── telemetry.py    # OpenTelemetry setup
│   │   └── metrics.py      # Prometheus metrics
{% endif %}
│   ├── api/                # API routes
│   │   ├── __init__.py     # Router registration
│   │   └── health.py       # Health check endpoints
│   ├── db/                 # Database layer
│   │   ├── database.py     # Database configuration
│   │   └── models.py       # SQLAlchemy models
│   └── services/           # Business logic
├── tests/                  # Test suite
│   ├── unit/              # Unit tests
│   └── e2e/               # End-to-end tests
{% if config.orm == "sqlalchemy+alembic" %}
├── alembic/               # Database migrations
│   └── versions/          # Migration files
├── alembic.ini            # Alembic configuration
{% endif %}
{% if config.docker %}
├── docker-compose.yml     # Development services
├── Dockerfile             # Container definition
└── .dockerignore          # Docker ignore file
{% endif %}
├── pyproject.toml         # Python project configuration
├── .env.example           # Environment variables template
└── README.md              # This file
```

## 🛠 Development

### Available Commands

```bash
# Development
uvicorn src.app:app --reload              # Start dev server
{% if config.queue != "none" %}
python -m src.workers.worker              # Start background worker
{% endif %}

# Database
{% if config.orm == "sqlalchemy+alembic" %}
alembic revision --autogenerate -m "msg"  # Create migration
alembic upgrade head                      # Apply migrations
alembic downgrade -1                      # Rollback migration
{% endif %}

# Testing
pytest tests/ -v                         # Run tests
pytest tests/ -v --cov=src              # Run tests with coverage

# Code Quality
black src tests                          # Format code
isort src tests                          # Sort imports
ruff check src tests                     # Lint code
mypy src                                # Type checking

# Docker
docker-compose up -d                     # Start all services
docker-compose down                      # Stop all services
docker build -t {{ config.name }}:latest .    # Build image
```

### Adding New Features

1. **Add a new model:**
   - Define model in `src/db/models.py`
   - Create migration: `alembic revision --autogenerate -m "add new model"`
   - Apply migration: `alembic upgrade head`

2. **Add a new API endpoint:**
   - Create router in `src/api/your_feature.py`
   - Register router in `src/api/__init__.py`
   - Add tests in `tests/unit/api/test_your_feature.py`

3. **Add background job:**
   - Define task in `src/jobs/your_task.py`
   - Register task in worker configuration
   - Add unit tests

## 🔧 Configuration

### Environment Variables

Key environment variables (see `.env.example` for full list):

- `SECRET_KEY` - Application secret key (required)
{% if config.auth %}
- `JWT_SECRET_KEY` - JWT signing key (required)
{% endif %}
- `DATABASE_URL` - Database connection string
{% if config.queue == "redis" or config.queue == "rq" %}
- `REDIS_URL` - Redis connection string
{% endif %}
- `DEBUG` - Enable debug mode (development only)

### Security Considerations

- Always set strong `SECRET_KEY`{% if config.auth %} and `JWT_SECRET_KEY`{% endif %} in production
- Configure `ALLOWED_HOSTS` and `CORS_ORIGINS` appropriately
- Use environment-specific configuration files
- Enable rate limiting in production
{% if config.telemetry %}
- Configure telemetry endpoints securely
{% endif %}

## 🚀 Deployment

### Railway (Recommended)

1. Connect your repository to Railway
2. Set environment variables in Railway dashboard
3. Deploy automatically on push to main

### Docker

```bash
# Build and run
docker build -t {{ config.name }}:latest .
docker run -p 8000:8000 --env-file .env {{ config.name }}:latest
```

### Manual Deployment

```bash
# Install dependencies
pip install -e .

# Run migrations
alembic upgrade head

# Start application
uvicorn src.app:app --host 0.0.0.0 --port $PORT
```

## 📊 Monitoring

{% if config.telemetry %}
### Metrics and Tracing

- Prometheus metrics: `/metrics`
- OpenTelemetry tracing enabled
- Health checks: `/health/detailed`

### Dashboard Setup

Use the included `docker-compose.yml` to start monitoring stack:

```bash
docker-compose --profile monitoring up -d
```

Access dashboards:
- Prometheus: http://localhost:9090
- Grafana: http://localhost:3000 (admin/admin)
{% endif %}

### Health Checks

- Basic: `GET /health`
- Detailed: `GET /health/detailed` (includes DB{% if config.queue == "redis" or config.queue == "rq" %}, Redis{% endif %} status)
- Kubernetes readiness: `GET /health/ready`
- Kubernetes liveness: `GET /health/live`

## 🧪 Testing

### Running Tests

```bash
# All tests
pytest

# Specific test file
pytest tests/unit/api/test_health.py

# With coverage
pytest --cov=src --cov-report=html
```

### Test Structure

- `tests/unit/` - Unit tests for individual components
- `tests/e2e/` - End-to-end tests for full workflows
- `tests/conftest.py` - Shared test fixtures

## 📚 API Documentation

- Interactive docs: http://localhost:8000/docs (Swagger UI)
- ReDoc: http://localhost:8000/redoc
- OpenAPI JSON: http://localhost:8000/openapi.json

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Run the test suite
6. Submit a pull request

## 📄 License

This project is licensed under the MIT License.

---

Generated by [LEA MCP Server](https://github.com/beka4kaa/lea) 🚀