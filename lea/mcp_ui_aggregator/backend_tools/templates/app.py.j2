"""FastAPI application entry point."""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
{% if config.telemetry %}
from opentelemetry.instrumentation.fastapi import FastAPIInstrumentor
{% endif %}

from src.core.settings import settings
from src.api.health import router as health_router
{% if config.telemetry %}
from src.core.telemetry import setup_telemetry
from src.core.metrics import setup_metrics
{% endif %}


def create_app() -> FastAPI:
    """Create and configure FastAPI application."""
    
    app = FastAPI(
        title="{{ config.name | title }} API",
        description="Production-ready FastAPI service",
        version="1.0.0",
        docs_url="/docs" if settings.debug else None,
        redoc_url="/redoc" if settings.debug else None,
    )
    
    # Security middleware
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=settings.allowed_hosts
    )
    
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.cors_origins,
        allow_credentials=True,
        allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        allow_headers=["*"],
    )
    
    # Include routers
    app.include_router(health_router, prefix="/health", tags=["health"])
    
    {% if config.telemetry %}
    # Setup telemetry
    if settings.telemetry_enabled:
        setup_telemetry(app)
        setup_metrics(app)
        FastAPIInstrumentor.instrument_app(app)
    {% endif %}
    
    return app


app = create_app()


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "src.app:app",
        host="0.0.0.0",
        port=settings.port,
        reload=settings.debug
    )