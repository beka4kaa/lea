#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö MCP —Ñ—É–Ω–∫—Ü–∏–π."""

import requests
import json

BASE_URL = "http://localhost:8000"

def send_mcp_request(method: str, params: dict = None, request_id: int = 1):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ MCP –∑–∞–ø—Ä–æ—Å–∞."""
    mcp_data = {
        "jsonrpc": "2.0",
        "method": method,
        "params": params or {},
        "id": request_id
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MCP –∑–∞–ø—Ä–æ—Å:")
    print(f"   Method: {method}")
    print(f"   Params: {json.dumps(params, indent=2) if params else 'None'}")
    
    try:
        response = requests.post(f"{BASE_URL}/mcp", json=mcp_data, timeout=10)
        print(f"üì• –û—Ç–≤–µ—Ç (HTTP {response.status_code}):")
        
        if response.status_code == 200:
            result = response.json()
            if 'result' in result and 'content' in result['result']:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ MCP –æ—Ç–≤–µ—Ç–∞
                content = result['result']['content'][0]['text']
                try:
                    parsed_content = json.loads(content)
                    print(json.dumps(parsed_content, indent=2, ensure_ascii=False))
                    return parsed_content
                except json.JSONDecodeError:
                    print(content)
                    return content
            else:
                print(json.dumps(result, indent=2, ensure_ascii=False))
                return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return {"error": response.text}
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return {"error": str(e)}

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• MCP –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    
    # 1. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\n1Ô∏è‚É£ –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫:")
    print("-" * 40)
    search_params = {
        "name": "search_component",
        "arguments": {
            "query": "button",
            "limit": 3
        }
    }
    result1 = send_mcp_request("tools/call", search_params, 1)
    
    # 2. –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\n2Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    print("-" * 40)
    list_params = {
        "name": "list_components",
        "arguments": {
            "limit": 3,
            "provider": "shadcn"
        }
    }
    result2 = send_mcp_request("tools/call", list_params, 2)
    
    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥)
    print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:")
    print("-" * 40)
    code_params = {
        "name": "get_component_code",
        "arguments": {
            "component_id": "shadcn/button"
        }
    }
    result3 = send_mcp_request("tools/call", code_params, 3)
    
    print("\n" + "=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    success_count = 0
    total_count = 3
    
    if result1 and not result1.get("error"):
        print("‚úÖ –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –ò–°–ü–†–ê–í–õ–ï–ù")
        success_count += 1
    else:
        print("‚ùå –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    
    if result2 and not result2.get("error"):
        print("‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –ò–°–ü–†–ê–í–õ–ï–ù")  
        success_count += 1
    else:
        print("‚ùå –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        
    if result3 and not result3.get("error"):
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞: –ò–°–ü–†–ê–í–õ–ï–ù")
        success_count += 1
    else:
        print("‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞: –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    
    if success_count == total_count:
        print("üéâ –í–°–ï MCP –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
    else:
        print("üîß –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    main()