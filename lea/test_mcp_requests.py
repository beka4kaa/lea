#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã."""

import requests
import json
import time
from typing import Dict, Any

BASE_URL = "http://localhost:8000"

def send_mcp_request(method: str, params: Dict = None, request_id: int = 1) -> Dict[Any, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ MCP –∑–∞–ø—Ä–æ—Å–∞."""
    mcp_data = {
        "jsonrpc": "2.0",
        "method": method,
        "params": params or {},
        "id": request_id
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MCP –∑–∞–ø—Ä–æ—Å:")
    print(f"   Method: {method}")
    print(f"   Params: {json.dumps(params, indent=2) if params else 'None'}")
    
    try:
        response = requests.post(f"{BASE_URL}/mcp", json=mcp_data, timeout=10)
        print(f"üì• –û—Ç–≤–µ—Ç (HTTP {response.status_code}):")
        
        if response.status_code == 200:
            result = response.json()
            print(json.dumps(result, indent=2, ensure_ascii=False))
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return {"error": response.text}
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return {"error": str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP –°–ï–†–í–ï–†–ê")
    print("=" * 60)
    
    # 1. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP:")
    print("-" * 40)
    send_mcp_request("tools/list")
    
    time.sleep(1)
    
    # 2. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫:")
    print("-" * 40)
    search_params = {
        "name": "search_component",
        "arguments": {
            "query": "button",
            "limit": 5
        }
    }
    send_mcp_request("tools/call", search_params, 2)
    
    time.sleep(1)
    
    # 3. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\n3Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    print("-" * 40)
    list_params = {
        "name": "list_components",
        "arguments": {
            "limit": 3,
            "provider": "shadcn"
        }
    }
    send_mcp_request("tools/call", list_params, 3)
    
    time.sleep(1)
    
    # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    print("\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:")
    print("-" * 40)
    code_params = {
        "name": "get_component_code",
        "arguments": {
            "component_id": "shadcn/button"
        }
    }
    send_mcp_request("tools/call", code_params, 4)
    
    time.sleep(1)
    
    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∞
    print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∞:")
    print("-" * 40)
    block_params = {
        "name": "get_block",
        "arguments": {
            "block_type": "auth",
            "target": "nextjs",
            "style": "tailwind"
        }
    }
    send_mcp_request("tools/call", block_params, 5)
    
    time.sleep(1)
    
    # 6. –ü–ª–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    print("\n6Ô∏è‚É£ –ü–ª–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    print("-" * 40)
    install_params = {
        "name": "install_plan",
        "arguments": {
            "component_ids": ["shadcn/button", "shadcn/input"],
            "target": "nextjs",
            "package_manager": "npm"
        }
    }
    send_mcp_request("tools/call", install_params, 6)
    
    time.sleep(1)
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    print("\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞:")
    print("-" * 40)
    verify_params = {
        "name": "verify",
        "arguments": {
            "code": "import React from 'react'; export default function Button({ children }) { return <button className='px-4 py-2 bg-blue-500 text-white rounded'>{children}</button>; }",
            "framework": "react"
        }
    }
    send_mcp_request("tools/call", verify_params, 7)
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()